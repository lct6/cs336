Lisa Terwilliger

Make sure that you can explain:

1.the component structure of the application. What makes the UI composable and why does this matter?
	You do not have to return basic HTML. You can return a tree of components that you (or someone else) built. This is what makes React composable: a key tenet of maintainable frontends.

2. what JSX does.
	JSX is a JavaScript syntax extension that looks similar to XML. You can use a simple JSX syntactic transform with React. JSX is a concise and familiar syntax for defining tree structures with attributes.

3. how the data flows through the components; how are comments loaded? created? saved?
	Flows through a Controlled component because it does not maintain its own internal state; the component renders purely based on props. Loaded through the server, created by the submit action in the example.js file, and saved into the comments.json file.

4.the nature and purpose of props and state; which is immutable and which is mutable and why does this distinction matter?
	Using props, we will be able to read the data passed to the Comment from the CommentList, and render some markup. props are immutable: they are passed from the parent and are "owned" by the parent.



1. Try editing the comments.json file (to add or remove a legal comment). What happens and why?
	page "refreshes" to delete or add the comment automatically. All we have done here is move the AJAX call to a separate method and call it when the component is first loaded and every 2 seconds after that.

2. When the CommentBox has loaded comments from the server (in loadCommentsFromServer()), why doesn’t it call render() to make them visible?
	If that is done then as a result, the state of the actual DOM will differ from that of the component. This is not ideal as the state of the view will differ from that of the component. In React, components should always represent the state of the view and not only at the point of initialization.

3. Why should components always represent the current state of the view?
	because the state of the view will differ from that of the component in the DOM and that isn't good.

4. The app implements optimistic updates. Isn’t optimism here more like foolishness? What if the server rejects the new comment (for whatever reason)?
	Then the comment can dissapear just like it was added prematurely. The chances of a comment being rejected seem small enough to have the app function optimistically and benefit from it.
